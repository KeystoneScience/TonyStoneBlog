/**
 * @param {Node} tree
 * @param {Options} options
 * @returns {EstreeProgram}
 */
export function toEstree(tree: Node, options?: Options): EstreeProgram
export type Node = import('unist').Node
export type Parent = import('hast').Parent
export type Root = import('hast').Root
export type Element = import('hast').Element
export type Text = import('hast').Text
export type Comment = import('hast').Comment
export type Properties = import('hast').Properties
export type EstreeNode = import('estree-jsx').Node
export type EstreeProgram = import('estree-jsx').Program
export type EstreeJsxExpressionContainer = import('estree-jsx').JSXExpressionContainer
export type EstreeJsxElement = import('estree-jsx').JSXElement
export type EstreeJsxOpeningElement = import('estree-jsx').JSXOpeningElement
export type EstreeJsxFragment = import('estree-jsx').JSXFragment
export type EstreeJsxAttribute = import('estree-jsx').JSXAttribute
export type EstreeJsxSpreadAttribute = import('estree-jsx').JSXSpreadAttribute
export type EstreeComment = import('estree-jsx').Comment
export type EstreeDirective = import('estree-jsx').Directive
export type EstreeStatement = import('estree-jsx').Statement
export type EstreeModuleDeclaration = import('estree-jsx').ModuleDeclaration
export type EstreeExpression = import('estree-jsx').Expression
export type EstreeProperty = import('estree-jsx').Property
export type EstreeJsxElementName = EstreeJsxOpeningElement['name']
export type EstreeJsxAttributeName = EstreeJsxAttribute['name']
export type EstreeJsxChild = EstreeJsxElement['children'][number]
export type ElementChild = Element['children'][number]
export type MDXJsxAttributeValueExpression = Node & {
  type: 'mdxJsxAttributeValueExpression'
  value: string
}
export type MDXJsxAttribute = Node & {
  type: 'mdxJsxAttribute'
  name: string
  value: (MDXJsxAttributeValueExpression | string) | null
}
export type MDXJsxExpressionAttribute = Node & {
  type: 'mdxJsxExpressionAttribute'
  value: string
}
export type MDXJsxElement = Parent & {
  name: string | null
  attributes: Array<MDXJsxExpressionAttribute | MDXJsxAttribute>
}
export type MDXJsxFlowElement = MDXJsxElement & {
  type: 'mdxJsxFlowElement'
  children: Array<MDXJsxFlowElement | ElementChild>
}
export type MDXJsxTextElement = MDXJsxElement & {
  type: 'mdxJsxTextElement'
  children: Array<MDXJsxTextElement | ElementChild>
}
export type MDXExpression = Node & {
  value: string
}
export type MDXFlowExpression = MDXExpression & {
  type: 'mdxFlowExpression'
}
export type MDXTextExpression = MDXExpression & {
  type: 'mdxTextExpression'
}
export type MDXEsm = Node & {
  type: 'mdxjsEsm'
  value: string
}
export type Info = ReturnType<typeof find>
export type Space = 'html' | 'svg'
export type Handle = (node: Node, context: Context) => EstreeJsxChild | null
export type Options = {
  space?: Space
  handlers?: {
    [x: string]: Handle
  }
}
export type Context = {
  schema: typeof html
  comments: Array<EstreeComment>
  esm: Array<EstreeDirective | EstreeStatement | EstreeModuleDeclaration>
  handle: Handle
}
import {find} from 'property-information'
import {html} from 'property-information'
